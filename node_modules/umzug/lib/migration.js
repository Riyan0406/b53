const path = require('path');
const { resolve } = require('./helper');

class Migration {
  constructor(filePath, options) {
    this.path = path.resolve(filePath);
    this.file = path.basename(this.path);
    this.options = options;
  }

  async migration() {
    if (typeof this.options.migrations.customResolver === 'function') {
      return this.options.migrations.customResolver(this.path);
    }

    if (this.path.match(/\.coffee$/)) {
      resolve('coffeescript/register') ||
      resolve('coffee-script/register') ||
      resolve('coffee-script') ||
      function () {
        console.error('You have to add "coffee-script" to your package.json.');
        process.exit(1);
      }();
    }

    return require(this.path);
  }

  async up() {
    return this._exec(this.options.upName, [].slice.apply(arguments));
  }

  async down() {
    return this._exec(this.options.downName, [].slice.apply(arguments));
  }

  testFileName(needle) {
    return this.file.indexOf(needle) === 0;
  }

  async _exec(method, args) {
    const migration = await this.migration();
    let fun = migration[method];

    if (migration.default) {
      fun = migration.default[method] || migration[method];
    }

    if (!fun) throw new Error('Could not find migration method: ' + method);

    const wrappedFun = this.options.migrations.wrap(fun);

    const result = wrappedFun.apply(migration, args);

    if (!result || typeof result.then !== 'function') {
      throw new Error(`Migration ${this.file} (or wrapper) didn't return a promise`);
    }

    await result;
  }
}

module.exports = Migration;
